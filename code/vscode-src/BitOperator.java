/*
 * https://www.bilibili.com/video/BV1fh411y7R8/?p=100&spm_id_from=pageDriver&vd_source=829ed8cae84110bb749e34bf4595adef
 * 位运算
 */

public class BitOperator {
    public static void main(String[] args) {

        System.out.println(2&3);
        //2=> 00000000 00000000 00000000 00000010 complement
        //3=> 00000000 00000000 00000000 00000011 complement
        //r=> 00000000 00000000 00000000 00000010 complement

        System.out.println(-2&-3);
        System.out.println(-2|-3);
        System.out.println(-2^-3);
        //下面是-2&-3的推导过程
        //-2=> 10000000 00000000 00000000 00000010 true
        //  => 11111111 11111111 11111111 11111101 minus-one
        //  => 11111111 11111111 11111111 11111110 complement

        //-3=> 10000000 00000000 00000000 00000011 true
        //  => 11111111 11111111 11111111 11111100 minus-one
        //  => 11111111 11111111 11111111 11111101 complement

        //r => 11111111 11111111 11111111 11111100 complement
        //  => 11111111 11111111 11111111 11111011 minus-one
        //  => 10000000 00000000 00000000 00000100 => -4

        System.out.println(~2);
        //2 => 00000000 00000000 00000000 00000010
        //~2=> 11111111 11111111 11111111 11111101
        //  => 11111111 11111111 11111111 11111100
        //  => 10000000 00000000 00000000 00000011 => -3

        System.out.println(~-2);
        //-2 => 10000000 00000000 00000000 00000010 true
        //   => 11111111 11111111 11111111 11111101 radix-minus-one
        //   => 11111111 11111111 11111111 11111110 complement
        //~-2=> 00000000 00000000 00000000 00000001 complement/true
    }    
}
